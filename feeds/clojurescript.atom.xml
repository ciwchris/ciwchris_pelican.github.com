<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Notes to self</title><link href="http://ciwchris.github.io/" rel="alternate"></link><link href="http://ciwchris.github.io/feeds/clojurescript.atom.xml" rel="self"></link><id>http://ciwchris.github.io/</id><updated>2014-01-06T15:48:00-08:00</updated><entry><title>Using AngularJS with ClojureScript: Part 1</title><link href="http://ciwchris.github.io/blog/using-purnam-with-angular-part-1.html" rel="alternate"></link><updated>2014-01-06T15:48:00-08:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2014-01-06:blog/using-purnam-with-angular-part-1.html</id><summary type="html">&lt;p&gt;Being new to Clojure and ClojureScript my goal is to recreate the &lt;a href="https://github.com/zcaudate/purnam-angular-example"&gt;Todo example&lt;/a&gt; using &lt;a href="http://docs.caudate.me/purnam/"&gt;Purnam&lt;/a&gt;, the JavaScript language extensions for ClojureScript, and also keep the scaffolding, dependency and build features which come with &lt;a href="http://yeoman.io/"&gt;yeoman&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Creating the application&lt;/h3&gt;
&lt;p&gt;We will create a new ClojureScript project named todo using the leiningen template cljs-kickoff. This will setup up the project with ClojureScript using cljsbuild and Ring. Then we will generate an AngularJS application using yo, meaning the content generated by leiningen, in the resources public folder, will not be needed. We will therefore remove this content and link this folder to the app folder created by yo.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lein new cljs-kickoff todo
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;todo
&lt;span class="gp"&gt;$&lt;/span&gt; yo angular todo
&lt;span class="go"&gt;Would you like to include Twitter Bootstrap? (Y/n) y&lt;/span&gt;
&lt;span class="go"&gt;If so, would you like to use Twitter Bootstrap for Compass (as opposed to vanilla CSS)? (Y/n) n&lt;/span&gt;
&lt;span class="go"&gt;Would you like to include angular-resource.js? (Y/n) n&lt;/span&gt;
&lt;span class="go"&gt;Would you like to include angular-cookies.js? (Y/n) n&lt;/span&gt;
&lt;span class="go"&gt;Would you like to include angular-sanitize.js? (Y/n) n&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rm -rf resources/public
&lt;span class="gp"&gt;$&lt;/span&gt; ln -s ~/todo/app ~/todo/resources/public
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Configuring Karma&lt;/h3&gt;
&lt;p&gt;At the time of writing there appears to be some inconsistencies between the generated karama configuration and other yeoman tools. Therefore the following edits in karma.conf.js are needed.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;karma.conf.js&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// list of files / patterns to load in the browser&lt;/span&gt;
&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;app/components/angular/angular.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// was: app/bower_components/angular/angular.js&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;app/components/angular-mocks/angular-mocks.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// was: app/bower_components/angular/angular-mocks.js&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;app/scripts/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;app/scripts/**/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;test/mock/**/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;test/spec/**/*.js&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;While we are here let's also turn on autoWatch and use PhantomJS as our browser.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;karma.conf.js&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;autoWatch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="nx"&gt;browsers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PhantomJS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;When running the Angular tests at this point, &lt;code&gt;grunt test&lt;/code&gt;, I receive the error:&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Running &amp;quot;karma:unit&amp;quot; (karma) task&lt;/span&gt;
&lt;span class="go"&gt;[2013-12-26 14:33:40.928] [ERROR] config - Invalid config file!&lt;/span&gt;
&lt;span class="go"&gt; [ReferenceError: module is not defined]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;This can be resolved by installing grunt-karma as a development dependency.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install grunt-karma --save-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Now when I run &lt;code&gt;grunt test&lt;/code&gt; the test, which came with the angular project, will run and pass. Now that we know tests are running properly we can remove the JavaScript created by the angular scaffolding, since we will be using the JavaScript compiled from the ClojureScript we create.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; rm -rf app/scripts/*
&lt;span class="gp"&gt;$&lt;/span&gt; rm -rf &lt;span class="nb"&gt;test&lt;/span&gt;/**/*.js
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Creating the html&lt;/h3&gt;
&lt;p&gt;First we'll edit index.html. Since we are using ClojureScript we will compile all of our ClojureScript to a single JavaScript file. Therefore we'll only include a reference to app.js and remove the reference to the main controller. Let's also remove Google Analytics.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/index.html&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="c"&gt;&amp;lt;!-- build:js scripts/scripts.js --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scripts/app.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- endbuild --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Next, let's update the view template, main.html. We'll start with displaying the number of todos.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/views/main.html&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Todo List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{remainingTodos()}} remaining&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Finally, we'll update the Ring server handler to serve our index.html page.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/clj/todo/server.clj&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:uri&lt;/span&gt; &lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;response/redirect&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Compiling ClojureScript&lt;/h3&gt;
&lt;p&gt;We need to make some change to the project file generated by leiningen. First add purnam as a dependency.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;project.clj&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ss"&gt;:dependencies&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;org.clojure/clojure&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1.5.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;org.clojure/clojurescript&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.0-1896&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;im.chit/purnam&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.1.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ring&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1.1.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Next, we'll change the output location of the generated JavaScript to the location we specified in the index.html page (remember resources/public/ is linked to app/).&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;project.clj&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ss"&gt;:main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="ss"&gt;:source-paths&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;src/cljs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="ss"&gt;:compiler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:output-to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;resources/public/scripts/app.js&amp;quot;&lt;/span&gt;
                  &lt;span class="ss"&gt;:optimizations&lt;/span&gt; &lt;span class="ss"&gt;:simple&lt;/span&gt;
                  &lt;span class="ss"&gt;:pretty-print&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="ss"&gt;:jar&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Then we'll add a duplicate section to compile the ClojureScript tests to JavaScript.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;project.clj&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ss"&gt;:unit-test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;:source-paths&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test/cljs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="ss"&gt;:compiler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:output-to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test/spec/app-tests.js&amp;quot;&lt;/span&gt;
                       &lt;span class="ss"&gt;:optimizations&lt;/span&gt; &lt;span class="ss"&gt;:simple&lt;/span&gt;
                       &lt;span class="ss"&gt;:pretty-print&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;The source location for the tests does not exist yet, we'll create it later. Before moving on it's a good idea to compile the ClojureScript to ensure everything is working as expected.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lein cljsbuild once
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Creating and configuring an Angular module&lt;/h3&gt;
&lt;p&gt;We'll remove the ClojureScript file created by leiningen and instead create a new file to define and configure our Angular module.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; rm src/cljs/todo/client.cljs
&lt;span class="gp"&gt;$&lt;/span&gt; touch src/cljs/todo/app.cljs
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;We'll start taking advantage of the macros defined in purnam. We'll also include the purnam JavaScript macros to generate raw JavaScript objects for use when defining our routes.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/cljs/todo/app.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;todo.app&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use-macros&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.js&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.angular&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;def.module&lt;/span&gt; &lt;span class="nv"&gt;def.config&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def.module&lt;/span&gt; &lt;span class="nv"&gt;todoApp&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def.config&lt;/span&gt; &lt;span class="nv"&gt;todoApp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$routeProvider&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doto &lt;/span&gt;&lt;span class="nv"&gt;$routeProvider&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.when&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;obj&lt;/span&gt; &lt;span class="ss"&gt;:templateUrl&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;views/main.html&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:controller&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MainCtrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.otherwise&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;obj&lt;/span&gt; &lt;span class="ss"&gt;:redirectTo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Creating a controller&lt;/h3&gt;
&lt;p&gt;We'll create a controller for the view main.html, which already exists and is defined in the routes we just configured in the section above.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir src/cljs/todo/controllers
&lt;span class="gp"&gt;$&lt;/span&gt; touch src/cljs/todo/controllers/main.cljs
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;We next define a simple controller containing a function on the scope to retrieve the remaining todos which we are already using in the main.html template we defined above.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/cljs/todo/controllers/main.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;todo.controllers.main&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;todo.app&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.cljs&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;aset-in&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use-macros&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.js&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;!&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.angular&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;def.controller&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def.controller&lt;/span&gt; &lt;span class="nv"&gt;todoApp.MainCtrl&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.remainingTodos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;!&lt;/code&gt; is a macro. It is used to set JavaScript objects using dot notation, which makes the ClojureScript a bit more readable when working with JavaScript. Before we get too far lets begin writing tests for the controller.&lt;/p&gt;
&lt;h3&gt;Writing a test for a controller&lt;/h3&gt;
&lt;p&gt;Create the directory structure and a test file for the controller.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir -p &lt;span class="nb"&gt;test&lt;/span&gt;/cljs/todo/controllers
&lt;span class="gp"&gt;$&lt;/span&gt; touch &lt;span class="nb"&gt;test&lt;/span&gt;/cljs/todo/controllers/main-tests.cljs
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Our first test will simply check the value we are returning from the remainingTodos function defined on our controller. We'll require the namespace we defined our controller in. We will take advantage of purnam.test to write our tests. Purnam.test defines several macros which help make the tests more readable. Purnam.test &lt;a href="http://docs.caudate.me/purnam/#init"&gt;requires the 'init' macro&lt;/a&gt; at the top of all test files.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;test/cljs/todo/controllers/main-tests.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;todo.controllers.main-tests&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;todo.controllers.main&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.cljs&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;aset-in&lt;/span&gt; &lt;span class="nv"&gt;aget-in&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use-macros&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.js&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.test&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;init&lt;/span&gt; &lt;span class="nv"&gt;describe&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;is-not&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.test.angular&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;describe.controller&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;describe.controller&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:doc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Testing Main Controller&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:module&lt;/span&gt; &lt;span class="nv"&gt;todoApp&lt;/span&gt;
   &lt;span class="ss"&gt;:controller&lt;/span&gt; &lt;span class="nv"&gt;MainCtrl&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;it&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;should have 3 default remaining todos&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$scope.remainingTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Let's make sure this test runs. It may be helpful at this point to auto compile the ClojureScript and auto run the tests.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; karma start karma.conf.js &amp;amp;
&lt;span class="gp"&gt;$&lt;/span&gt; lein cljsbuild auto
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Adding to the test&lt;/h3&gt;
&lt;p&gt;With a test in place let's go back to the main controller and add 3 default todos and change the remainingTodos functions to return the number of todos.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/cljs/todo/controllers/main.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def.controller&lt;/span&gt; &lt;span class="nv"&gt;todoApp.MainCtrl&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn Clojure&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn JavaScript&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn Angular&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.remainingTodos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.-length&lt;/span&gt; &lt;span class="nv"&gt;$scope.todos&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;We are now using an array so we will now need to include the &lt;code&gt;arr&lt;/code&gt; macro in main.cljs, &lt;code&gt;[purnam.js :only [! arr]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Making changes to the application's ClojureScript source will cause leiningen to recompile the ClojureScript, if cljsbulid is run using auto. This will not cause the tests to rerun though. You must touch a ClojureScript test file first. Touching a ClojureScript test file will generate a new JavaScript test file. Karma will notice this change and rerun the tests. &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When we created the default todos adove, in addition to the name of the todo, we added an extra property to mark whether the todo is completed or not. Let's make use of this property. We'll begin by writing a test to verify we only count the todos not complete. We'll setup our test by assigning a new list of todos with one todo marked as complete.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;test/cljs/todo/controllers/main-tests.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;it&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;should filter out done todos&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn Clojure&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn JavaScript&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn Angular&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$scope.remainingTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Don't forget to include the additional macros &lt;code&gt;[purnam.js :only [obj ! arr]]&lt;/code&gt; in main-tests.cljs. This test will fail. Let's fix it.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/cljs/todo/controllers/main.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.remainingTodos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.-length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$scope.todos.filter&lt;/span&gt;
                                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not &lt;/span&gt;&lt;span class="nv"&gt;v.done&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Viewing the application&lt;/h3&gt;
&lt;p&gt;Let's now update our template to display the list of todos as a list.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/views/main.html&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Todo List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{remainingTodos()}} remaining&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unstyled&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;ng-repeat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;t in todos&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{t.text}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;There are a couple ways we can view our todo application. Since we are using grunt we can view our application by running &lt;code&gt;grunt server&lt;/code&gt;. This has the benefit of auto launching our application and automatically reloading the application when we make changes. The drawback is that it only works with the client side of our application. This is sufficient for our example, since we don't have any server code. The second way we can view our application is by using Ring, &lt;code&gt;lein ring server&lt;/code&gt;. Our website will then be available on the port we defined in server.clj, in our example we used port 3000. This does not have the drawback of grunt but also does not include the live reloading we benefited from when using grunt. A potential solution is to use both, run the client side of an application on one port using grunt and then run the server side of an application using Ring on another port. Since we don't have any server code we'll use grunt.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grunt server
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Next, let's add a checkbox next to each todo. When clicked it will mark the todo as complete. The todo will now be displayed in a label so it can be associated to the checkbox using the $index variable belonging to the ngRepeat directive.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/views/main.html&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Todo List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{remainingTodos()}} remaining&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unstyled remaining-todos&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;ng-repeat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;t in todos&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item{{ $index }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ng-model=&lt;/span&gt;&lt;span class="s"&gt;t.done&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item{{ $index }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ng-class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{&amp;#39;todo-done&amp;#39;: t.done}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{t.text}}
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;And we'll add some styling to align the checkbox to the left of the label and display done todos as completed by drawing a line through them.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/style/main.css&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.remaining-todos&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;checkbox&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.todo-done&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;line-through&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So far we have looked at creating our todo application using both leiningen as well as yeoman, in attempt to reap the benefits of both. We have seen that using Purnam makes working with JavaScript and AngularJS simpler and more readable. We are able to write tests for our application and use cljsbuild to auto compile our ClojureScript and Karma to auto run our tests, although we need to touch a test file after changing our application's source so that the tests will rerun.&lt;/p&gt;
&lt;p&gt;At this point our todo application isn't very functional. We can display todos and mark them as complete. Next we'll look at creating filters to display todo counts, create a service for working with the list of todos and introduce functionality for adding new todos.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ciwchris/purnam-angular-example"&gt;Example source&lt;/a&gt;&lt;/p&gt;</summary><category term="clojurescript angular"></category></entry></feed>