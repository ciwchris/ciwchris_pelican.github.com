<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Notes to self</title><link href="http://ciwchris.github.io/" rel="alternate"></link><link href="http://ciwchris.github.io/feeds/all.atom.xml" rel="self"></link><id>http://ciwchris.github.io/</id><updated>2014-02-17T20:48:00-08:00</updated><entry><title>Structure and Interpretation of Computer Programs: Highlighted Text</title><link href="http://ciwchris.github.io/blog/sicp-highlights.html" rel="alternate"></link><updated>2014-02-17T20:48:00-08:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2014-02-17:blog/sicp-highlights.html</id><summary type="html">&lt;p&gt;Text highlighted during an initial reading of
&lt;a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Chapter 1&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Master software engineers have the ability to organize programs so that they can be reasonably sure that the resulting processes will perform the tasks intended.&lt;/li&gt;
&lt;li&gt;The most significant of these features is the fact that Lisp descriptions of processes, called procedures, can themselves be represented and manipulated as Lisp data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1.1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.)&lt;/li&gt;
&lt;li&gt;substitution model&lt;/li&gt;
&lt;li&gt;normal-order evaluation vs applicative-order evaluation&lt;/li&gt;
&lt;li&gt;The word predicate is used for procedures that return true or false, as well as for expressions that evaluate to true or false.&lt;/li&gt;
&lt;li&gt;The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge.&lt;/li&gt;
&lt;li&gt;block structure&lt;/li&gt;
&lt;li&gt;lexical scoping&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1.2&lt;/h2&gt;
&lt;p&gt;(having to do with mathematics and calculating space and operations)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linear recursive process vs linear iterative process&lt;/li&gt;
&lt;li&gt;It will execute an iterative process in constant space, even if the iterative process is described by a recursive procedure. An implementation with this property is called tail-recursive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1.3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Procedures that manipulate procedures are called higher-order procedures.&lt;/li&gt;
&lt;li&gt;Experienced programmers know how to choose procedural formulations that are particularly perspicuous, and where useful elements of the process are exposed as separate entities that can be reused in other applications.&lt;/li&gt;
&lt;li&gt;expert programmers know how to choose the level of abstraction appropriate to their task.&lt;/li&gt;
&lt;li&gt;Lisp, unlike other common programming languages, awards procedures full first-class status. This poses challenges for efficient implementation, but the resulting gain in expressive power is enormous.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Chapter 2&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;The general technique of isolating the parts of a program that deal with how data objects are represented from the parts of a program that deal with how data objects are used is a powerful design methodology called data abstraction.&lt;/li&gt;
&lt;li&gt;closure -- that the glue we use for combining data objects should allow us to combine not only primitive data objects, but compound data objects as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2.1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Data abstraction is a methodology that enables us to isolate how a compound data object is used from the details of how it is constructed from more primitive data objects.&lt;/li&gt;
&lt;li&gt;Data objects constructed from pairs are called list-structured data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2.2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The word nil is a contraction of the Latin word nihil, which means 'nothing.'&lt;/li&gt;
&lt;li&gt;The difference between the two definitions is not that the computer is performing a different process (it isn't) but that we think about the process differently. In effect, map helps establish an abstraction barrier that isolates the implementation of procedures that transform lists from the details of how the elements of the list are extracted and combined.&lt;/li&gt;
&lt;li&gt;In working with compound data, we've stressed how data abstraction permits us to design programs without becoming enmeshed in the details of data representations, and how abstraction preserves for us the flexibility to experiment with alternative representations.&lt;/li&gt;
&lt;li&gt;The value of expressing programs as sequence operations is that this helps us make program designs that are modular, that is, designs that are constructed by combining relatively independent pieces.&lt;/li&gt;
&lt;li&gt;stratified design, the notion that a complex system should be structured as a sequence of levels that are described using a sequence of languages. Each level is constructed by combining parts that are regarded as primitive at that level, and the parts constructed at each level are used as primitives at the next level.&lt;/li&gt;
&lt;li&gt;Stratified design helps make programs robust, that is, it makes it likely that small changes in a specification will require correspondingly small changes in the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2.3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Symbolic differentiation is of special historical significance in Lisp. It was one of the motivating examples behind the development of a computer language for symbol manipulation. &lt;/li&gt;
&lt;li&gt;We can represent trees by using lists. Each node will be a list of three items: the entry at the node, the left subtree, and the right subtree.&lt;/li&gt;
&lt;li&gt;We have examined options for using lists to represent sets and have seen how the choice of representation for a data object can have a large impact on the performance of the programs that use the data.&lt;/li&gt;
&lt;li&gt;The designer can create an initial implementation using a simple, straightforward representation such as unordered lists. This will be unsuitable for the eventual system, but it can be useful in providing a 'quick and dirty' data base with which to test the rest of the system. Later on, the data representation can be modified to be more sophisticated. If the data base is accessed in terms of abstract selectors and constructors, this change in representation will not require any changes to the rest of the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2.4&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;These data-abstraction barriers are powerful tools for controlling complexity. By isolating the underlying representations of data objects, we can divide the task of designing a large program into smaller tasks that can be performed separately. &lt;/li&gt;
&lt;li&gt;So in addition to the data-abstraction barriers that isolate representation from use, we need abstraction barriers that isolate different design choices from each other and permit different choices to coexist in a single program. &lt;/li&gt;
&lt;li&gt;Our main technique for building generic procedures will be to work in terms of data objects that have type tags, that is, data objects that include explicit information about how they are to be processed.&lt;/li&gt;
&lt;li&gt;The principle of least commitment: The abstraction barrier formed by the selectors and constructors permits us to defer to the last possible moment the choice of a concrete representation for our data objects and thus retain maximum flexibility in our system design.&lt;/li&gt;
&lt;li&gt;The general strategy of checking the type of a datum and calling an appropriate procedure is called dispatching on type.&lt;/li&gt;
&lt;li&gt;data-directed programming: Here we will implement the interface as a single procedure that looks up the combination of the operation name and argument type in the table to find the correct procedure to apply, and then applies it to the contents of the argument.&lt;/li&gt;
&lt;li&gt;message passing: An alternative implementation strategy is to decompose the table into columns and, instead of using 'intelligent operations' that dispatch on data types, to work with 'intelligent data objects' that dispatch on operation names.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2.5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Often the different data types are not completely independent, and there may be ways by which objects of one type may be viewed as being of another type. This process is called coercion.&lt;/li&gt;
&lt;li&gt;In general, we can implement this idea by designing coercion procedures that transform an object of one type into an equivalent object of another type.&lt;/li&gt;
&lt;li&gt;hierarchy of types, in which, for example, integers are a subtype of rational numbers&lt;/li&gt;
&lt;li&gt;in which each type has at most one supertype and at most one subtype. Such a structure, called a tower,&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Chapter 3&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;In particular, we need strategies to help us structure large systems so that they will be modular, that is, so that they can be divided 'naturally' into coherent parts that can be separately developed and maintained.&lt;/li&gt;
&lt;li&gt;The first organizational strategy concentrates on objects, viewing a large system as a collection of distinct objects whose behaviors may change over time. An alternative organizational strategy concentrates on the streams of information that flow in the system, much as an electrical engineer views a signal-processing system.&lt;/li&gt;
&lt;li&gt;The difficulties of dealing with objects, change, and identity are a fundamental consequence of the need to grapple with time in our computational models.&lt;/li&gt;
&lt;li&gt;delayed evaluation: The stream approach can be most fully exploited when we decouple simulated time in our model from the order of the events that take place in the computer during evaluation.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="sicp"></category><category term="lisp"></category><category term="books"></category></entry><entry><title>Using AngularJS with ClojureScript: Part 1</title><link href="http://ciwchris.github.io/blog/using-purnam-with-angular-part-1.html" rel="alternate"></link><updated>2014-01-06T15:48:00-08:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2014-01-06:blog/using-purnam-with-angular-part-1.html</id><summary type="html">&lt;p&gt;Being new to Clojure and ClojureScript my goal is to recreate the &lt;a href="https://github.com/zcaudate/purnam-angular-example"&gt;Todo example&lt;/a&gt; using &lt;a href="http://docs.caudate.me/purnam/"&gt;Purnam&lt;/a&gt;, the JavaScript language extensions for ClojureScript, and also keep the scaffolding, dependency and build features which come with &lt;a href="http://yeoman.io/"&gt;yeoman&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Creating the application&lt;/h3&gt;
&lt;p&gt;We will create a new ClojureScript project named todo using the leiningen template cljs-kickoff. This will setup up the project with ClojureScript using cljsbuild and Ring. Then we will generate an AngularJS application using yo, meaning the content generated by leiningen, in the resources public folder, will not be needed. We will therefore remove this content and link this folder to the app folder created by yo.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lein new cljs-kickoff todo
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;todo
&lt;span class="gp"&gt;$&lt;/span&gt; yo angular todo
&lt;span class="go"&gt;Would you like to include Twitter Bootstrap? (Y/n) y&lt;/span&gt;
&lt;span class="go"&gt;If so, would you like to use Twitter Bootstrap for Compass (as opposed to vanilla CSS)? (Y/n) n&lt;/span&gt;
&lt;span class="go"&gt;Would you like to include angular-resource.js? (Y/n) n&lt;/span&gt;
&lt;span class="go"&gt;Would you like to include angular-cookies.js? (Y/n) n&lt;/span&gt;
&lt;span class="go"&gt;Would you like to include angular-sanitize.js? (Y/n) n&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; rm -rf resources/public
&lt;span class="gp"&gt;$&lt;/span&gt; ln -s ~/todo/app ~/todo/resources/public
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Configuring Karma&lt;/h3&gt;
&lt;p&gt;At the time of writing there appears to be some inconsistencies between the generated karama configuration and other yeoman tools. Therefore the following edits in karma.conf.js are needed.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;karma.conf.js&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// list of files / patterns to load in the browser&lt;/span&gt;
&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;app/components/angular/angular.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// was: app/bower_components/angular/angular.js&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;app/components/angular-mocks/angular-mocks.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// was: app/bower_components/angular/angular-mocks.js&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;app/scripts/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;app/scripts/**/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;test/mock/**/*.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;test/spec/**/*.js&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;While we are here let's also turn on autoWatch and use PhantomJS as our browser.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;karma.conf.js&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;autoWatch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="nx"&gt;browsers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PhantomJS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;When running the Angular tests at this point, &lt;code&gt;grunt test&lt;/code&gt;, I receive the error:&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;Running &amp;quot;karma:unit&amp;quot; (karma) task&lt;/span&gt;
&lt;span class="go"&gt;[2013-12-26 14:33:40.928] [ERROR] config - Invalid config file!&lt;/span&gt;
&lt;span class="go"&gt; [ReferenceError: module is not defined]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;This can be resolved by installing grunt-karma as a development dependency.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install grunt-karma --save-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Now when I run &lt;code&gt;grunt test&lt;/code&gt; the test, which came with the angular project, will run and pass. Now that we know tests are running properly we can remove the JavaScript created by the angular scaffolding, since we will be using the JavaScript compiled from the ClojureScript we create.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; rm -rf app/scripts/*
&lt;span class="gp"&gt;$&lt;/span&gt; rm -rf &lt;span class="nb"&gt;test&lt;/span&gt;/**/*.js
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Creating the html&lt;/h3&gt;
&lt;p&gt;First we'll edit index.html. Since we are using ClojureScript we will compile all of our ClojureScript to a single JavaScript file. Therefore we'll only include a reference to app.js and remove the reference to the main controller. Let's also remove Google Analytics.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/index.html&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="c"&gt;&amp;lt;!-- build:js scripts/scripts.js --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scripts/app.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- endbuild --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Next, let's update the view template, main.html. We'll start with displaying the number of todos.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/views/main.html&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Todo List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{remainingTodos()}} remaining&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Finally, we'll update the Ring server handler to serve our index.html page.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/clj/todo/server.clj&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:uri&lt;/span&gt; &lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;response/redirect&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Compiling ClojureScript&lt;/h3&gt;
&lt;p&gt;We need to make some change to the project file generated by leiningen. First add purnam as a dependency.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;project.clj&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ss"&gt;:dependencies&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nv"&gt;org.clojure/clojure&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1.5.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;org.clojure/clojurescript&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.0-1896&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;im.chit/purnam&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.1.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ring&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1.1.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Next, we'll change the output location of the generated JavaScript to the location we specified in the index.html page (remember resources/public/ is linked to app/).&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;project.clj&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ss"&gt;:main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="ss"&gt;:source-paths&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;src/cljs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="ss"&gt;:compiler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:output-to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;resources/public/scripts/app.js&amp;quot;&lt;/span&gt;
                  &lt;span class="ss"&gt;:optimizations&lt;/span&gt; &lt;span class="ss"&gt;:simple&lt;/span&gt;
                  &lt;span class="ss"&gt;:pretty-print&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="ss"&gt;:jar&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Then we'll add a duplicate section to compile the ClojureScript tests to JavaScript.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;project.clj&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ss"&gt;:unit-test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;:source-paths&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test/cljs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="ss"&gt;:compiler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:output-to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test/spec/app-tests.js&amp;quot;&lt;/span&gt;
                       &lt;span class="ss"&gt;:optimizations&lt;/span&gt; &lt;span class="ss"&gt;:simple&lt;/span&gt;
                       &lt;span class="ss"&gt;:pretty-print&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;The source location for the tests does not exist yet, we'll create it later. Before moving on it's a good idea to compile the ClojureScript to ensure everything is working as expected.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; lein cljsbuild once
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Creating and configuring an Angular module&lt;/h3&gt;
&lt;p&gt;We'll remove the ClojureScript file created by leiningen and instead create a new file to define and configure our Angular module.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; rm src/cljs/todo/client.cljs
&lt;span class="gp"&gt;$&lt;/span&gt; touch src/cljs/todo/app.cljs
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;We'll start taking advantage of the macros defined in purnam. We'll also include the purnam JavaScript macros to generate raw JavaScript objects for use when defining our routes.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/cljs/todo/app.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;todo.app&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use-macros&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.js&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.angular&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;def.module&lt;/span&gt; &lt;span class="nv"&gt;def.config&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def.module&lt;/span&gt; &lt;span class="nv"&gt;todoApp&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def.config&lt;/span&gt; &lt;span class="nv"&gt;todoApp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$routeProvider&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;doto &lt;/span&gt;&lt;span class="nv"&gt;$routeProvider&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.when&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;obj&lt;/span&gt; &lt;span class="ss"&gt;:templateUrl&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;views/main.html&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:controller&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;MainCtrl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.otherwise&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;obj&lt;/span&gt; &lt;span class="ss"&gt;:redirectTo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Creating a controller&lt;/h3&gt;
&lt;p&gt;We'll create a controller for the view main.html, which already exists and is defined in the routes we just configured in the section above.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir src/cljs/todo/controllers
&lt;span class="gp"&gt;$&lt;/span&gt; touch src/cljs/todo/controllers/main.cljs
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;We next define a simple controller containing a function on the scope to retrieve the remaining todos which we are already using in the main.html template we defined above.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/cljs/todo/controllers/main.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;todo.controllers.main&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;todo.app&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.cljs&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;aset-in&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use-macros&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.js&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;!&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.angular&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;def.controller&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def.controller&lt;/span&gt; &lt;span class="nv"&gt;todoApp.MainCtrl&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.remainingTodos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;!&lt;/code&gt; is a macro. It is used to set JavaScript objects using dot notation, which makes the ClojureScript a bit more readable when working with JavaScript. Before we get too far lets begin writing tests for the controller.&lt;/p&gt;
&lt;h3&gt;Writing a test for a controller&lt;/h3&gt;
&lt;p&gt;Create the directory structure and a test file for the controller.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir -p &lt;span class="nb"&gt;test&lt;/span&gt;/cljs/todo/controllers
&lt;span class="gp"&gt;$&lt;/span&gt; touch &lt;span class="nb"&gt;test&lt;/span&gt;/cljs/todo/controllers/main-tests.cljs
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Our first test will simply check the value we are returning from the remainingTodos function defined on our controller. We'll require the namespace we defined our controller in. We will take advantage of purnam.test to write our tests. Purnam.test defines several macros which help make the tests more readable. Purnam.test &lt;a href="http://docs.caudate.me/purnam/#init"&gt;requires the 'init' macro&lt;/a&gt; at the top of all test files.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;test/cljs/todo/controllers/main-tests.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;todo.controllers.main-tests&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:require&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;todo.controllers.main&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.cljs&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;aset-in&lt;/span&gt; &lt;span class="nv"&gt;aget-in&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:use-macros&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.js&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.test&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;init&lt;/span&gt; &lt;span class="nv"&gt;describe&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;is-not&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;purnam.test.angular&lt;/span&gt; &lt;span class="ss"&gt;:only&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;describe.controller&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;describe.controller&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:doc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Testing Main Controller&amp;quot;&lt;/span&gt;
   &lt;span class="ss"&gt;:module&lt;/span&gt; &lt;span class="nv"&gt;todoApp&lt;/span&gt;
   &lt;span class="ss"&gt;:controller&lt;/span&gt; &lt;span class="nv"&gt;MainCtrl&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;it&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;should have 3 default remaining todos&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$scope.remainingTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Let's make sure this test runs. It may be helpful at this point to auto compile the ClojureScript and auto run the tests.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; karma start karma.conf.js &amp;amp;
&lt;span class="gp"&gt;$&lt;/span&gt; lein cljsbuild auto
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Adding to the test&lt;/h3&gt;
&lt;p&gt;With a test in place let's go back to the main controller and add 3 default todos and change the remainingTodos functions to return the number of todos.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/cljs/todo/controllers/main.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def.controller&lt;/span&gt; &lt;span class="nv"&gt;todoApp.MainCtrl&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn Clojure&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn JavaScript&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn Angular&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.remainingTodos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.-length&lt;/span&gt; &lt;span class="nv"&gt;$scope.todos&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;We are now using an array so we will now need to include the &lt;code&gt;arr&lt;/code&gt; macro in main.cljs, &lt;code&gt;[purnam.js :only [! arr]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Making changes to the application's ClojureScript source will cause leiningen to recompile the ClojureScript, if cljsbulid is run using auto. This will not cause the tests to rerun though. You must touch a ClojureScript test file first. Touching a ClojureScript test file will generate a new JavaScript test file. Karma will notice this change and rerun the tests. &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When we created the default todos adove, in addition to the name of the todo, we added an extra property to mark whether the todo is completed or not. Let's make use of this property. We'll begin by writing a test to verify we only count the todos not complete. We'll setup our test by assigning a new list of todos with one todo marked as complete.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;test/cljs/todo/controllers/main-tests.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;it&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;should filter out done todos&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn Clojure&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn JavaScript&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Learn Angular&amp;quot;&lt;/span&gt; &lt;span class="ss"&gt;:done&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$scope.remainingTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Don't forget to include the additional macros &lt;code&gt;[purnam.js :only [obj ! arr]]&lt;/code&gt; in main-tests.cljs. This test will fail. Let's fix it.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;src/cljs/todo/controllers/main.cljs&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;$scope.remainingTodos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
                             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.-length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;$scope.todos.filter&lt;/span&gt;
                                         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not &lt;/span&gt;&lt;span class="nv"&gt;v.done&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Viewing the application&lt;/h3&gt;
&lt;p&gt;Let's now update our template to display the list of todos as a list.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/views/main.html&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Todo List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{remainingTodos()}} remaining&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unstyled&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;ng-repeat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;t in todos&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{t.text}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;There are a couple ways we can view our todo application. Since we are using grunt we can view our application by running &lt;code&gt;grunt server&lt;/code&gt;. This has the benefit of auto launching our application and automatically reloading the application when we make changes. The drawback is that it only works with the client side of our application. This is sufficient for our example, since we don't have any server code. The second way we can view our application is by using Ring, &lt;code&gt;lein ring server&lt;/code&gt;. Our website will then be available on the port we defined in server.clj, in our example we used port 3000. This does not have the drawback of grunt but also does not include the live reloading we benefited from when using grunt. A potential solution is to use both, run the client side of an application on one port using grunt and then run the server side of an application using Ring on another port. Since we don't have any server code we'll use grunt.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grunt server
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Next, let's add a checkbox next to each todo. When clicked it will mark the todo as complete. The todo will now be displayed in a label so it can be associated to the checkbox using the $index variable belonging to the ngRepeat directive.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/views/main.html&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;centered&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Todo List&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{remainingTodos()}} remaining&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unstyled remaining-todos&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;ng-repeat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;t in todos&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item{{ $index }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ng-model=&lt;/span&gt;&lt;span class="s"&gt;t.done&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item{{ $index }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;ng-class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{&amp;#39;todo-done&amp;#39;: t.done}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{t.text}}
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;And we'll add some styling to align the checkbox to the left of the label and display done todos as completed by drawing a line through them.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;app/style/main.css&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.remaining-todos&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;checkbox&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.todo-done&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="k"&gt;line-through&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So far we have looked at creating our todo application using both leiningen as well as yeoman, in attempt to reap the benefits of both. We have seen that using Purnam makes working with JavaScript and AngularJS simpler and more readable. We are able to write tests for our application and use cljsbuild to auto compile our ClojureScript and Karma to auto run our tests, although we need to touch a test file after changing our application's source so that the tests will rerun.&lt;/p&gt;
&lt;p&gt;At this point our todo application isn't very functional. We can display todos and mark them as complete. Next we'll look at creating filters to display todo counts, create a service for working with the list of todos and introduce functionality for adding new todos.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ciwchris/purnam-angular-example"&gt;Example source&lt;/a&gt;&lt;/p&gt;</summary><category term="clojurescript angular"></category></entry><entry><title>Formatting with PowerShell</title><link href="http://ciwchris.github.io/blog/formatting-with-powershell.html" rel="alternate"></link><updated>2013-10-04T10:20:00-07:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-10-04:blog/formatting-with-powershell.html</id><summary type="html">&lt;p&gt;Notes from the Pluralsight course &lt;a href="http://pluralsight.com/training/Courses/TableOfContents/formatwithpowershell"&gt;Formatting With PowerShell&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ToString&lt;/h3&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Using a format provider&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;4242&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;42&lt;/span&gt;
&lt;span class="nb"&gt;Get-Culture&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Globalization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CultureInfo&lt;/span&gt; &lt;span class="n"&gt;de-DE&lt;/span&gt;
&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Numeric Format Strings&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c: Currency&lt;/li&gt;
&lt;li&gt;d: Decimal&lt;/li&gt;
&lt;li&gt;e: Exponential&lt;/li&gt;
&lt;li&gt;f: Fixed Point&lt;/li&gt;
&lt;li&gt;g: General (most compact form)&lt;/li&gt;
&lt;li&gt;n: Number&lt;/li&gt;
&lt;li&gt;p: Percent&lt;/li&gt;
&lt;li&gt;r: Round Trip (parsed back into the same numeric value&lt;/li&gt;
&lt;li&gt;x: Hexadecimal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Custom Numeric Placeholders&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: Zero&lt;/li&gt;
&lt;li&gt;#: Digit&lt;/li&gt;
&lt;li&gt;.: Decimal&lt;/li&gt;
&lt;li&gt;,: Group separator &lt;/li&gt;
&lt;li&gt;%: Percentage&lt;/li&gt;
&lt;li&gt;;: Section (different for positive, negative, zero)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Sections&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$v1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$v2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$v3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;$v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#0.0#;(#0.0#);-\0-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;NumberFormatInfo&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Get-Culture&lt;/span&gt;
&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Get-Member&lt;/span&gt; &lt;span class="n"&gt;-member&lt;/span&gt; &lt;span class="n"&gt;proptery&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;
&lt;span class="c"&gt;# DateTimeFormat&lt;/span&gt;
&lt;span class="c"&gt;# NumberFormat&lt;/span&gt;

&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Globalization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CultureInfo&lt;/span&gt; &lt;span class="n"&gt;en-us&lt;/span&gt;
&lt;span class="nv"&gt;$nf&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NumberFormat&lt;/span&gt;
&lt;span class="nv"&gt;$nf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrencyDecimalDigits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;3&lt;/span&gt;
&lt;span class="nv"&gt;$nf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrencySymbol&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ZOG&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$nf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrencyDecimalSeparator&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$nf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrenceyGroupSeparator&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;42424242&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;4242&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$nf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# ZOG 42/424/242*42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;TimeSpan&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ms&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Get-Date&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;August 9, 1995&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$today&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Get-Date&lt;/span&gt;
&lt;span class="nv"&gt;$time&lt;/span&gt;&lt;span class="n"&gt;-span&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;New-TimeSpan&lt;/span&gt; &lt;span class="n"&gt;-start&lt;/span&gt; &lt;span class="nv"&gt;$ms&lt;/span&gt; &lt;span class="n"&gt;-end&lt;/span&gt; &lt;span class="nv"&gt;$today&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Enums&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$enum&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="no"&gt;[System.Windows.Forms.Day]&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;{0,9} {1,9} {2,4} {3,10}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;#heading&lt;/span&gt;
&lt;span class="k"&gt;Foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$e&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="no"&gt;[System.enum]&lt;/span&gt;&lt;span class="err"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getvalues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$enum&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;{0,9} {1,9} {2,4} {3,10}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-f&lt;/span&gt;
    &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Composite Format String&lt;/h3&gt;
&lt;p&gt;{I, [W [: F]]}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I: index into array&lt;/li&gt;
&lt;li&gt;W: width&lt;ul&gt;
&lt;li&gt;Positive: right justified&lt;/li&gt;
&lt;li&gt;Negative: left justified&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;F: format string&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;{0} [{1,4}]=[{1,-4], and costs {2,-10:c}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-f&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;42&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;4242&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Today is {0}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-Date&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;Today is {0:g}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-f&lt;/span&gt; &lt;span class="nb"&gt;Get-Date&lt;/span&gt;
&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0,10} {1,10} {2,10:c}&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;-f&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Format-*&lt;/h3&gt;
&lt;p&gt;Formatting Rules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VIEW loaded in Format.Ps1XML&lt;/li&gt;
&lt;li&gt;PropertySet in Type.Ps1XML and move to next rule&lt;/li&gt;
&lt;li&gt;Property count&lt;ul&gt;
&lt;li&gt;Use properties in default PropertySet&lt;/li&gt;
&lt;li&gt;All properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5 or more: use Format-List&lt;/li&gt;
&lt;li&gt;&amp;lt; 5: use Format-Table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Table/List Formatting&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XML View defined in Format.Ps1XML&lt;/li&gt;
&lt;li&gt;XML Property Set in Type.Ps1XML&lt;/li&gt;
&lt;li&gt;Total properties&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;AutoSize&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="n"&gt;notepad&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="n"&gt;ProcessName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="n"&gt;-Autosize&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Truncation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-Wrap: Prevent truncating&lt;ul&gt;
&lt;li&gt;But will still stop at 4 lines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$FormatEnumerationLimit: to increase the lines beyond the default of 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Format-Wide: display single property using multiple columns&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Format-Wide&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;fw&lt;/span&gt; &lt;span class="n"&gt;-property&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;-column&lt;/span&gt; &lt;span class="n"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Select-Object&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;select-object&lt;/span&gt; &lt;span class="n"&gt;-first&lt;/span&gt; &lt;span class="n"&gt;20&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;
&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;select-object&lt;/span&gt; &lt;span class="p"&gt;*,&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ComputerName&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;={&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Hash Tables&lt;/h3&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Hash Table&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ht&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thomas Lee&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Formatting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$ht&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pluralsight&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Hash Table Properties&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$pn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Process Name&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;={&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Alignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;right&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$cpu&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CPU Used&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;={&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;Alignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="n"&gt;FormatString&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;N3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="n"&gt;notepad&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="nv"&gt;$pn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$cpu&lt;/span&gt; &lt;span class="n"&gt;-auto&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;XML Format Files&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stored in $Pshome folder&lt;/li&gt;
&lt;li&gt;Update-FormatData: load new format files using &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Display Format&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.\test.format.ps1xml&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DefaultSettings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PropertyCountForTable&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;PropertyCountForTable&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WrapTables&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;DefaultSettings&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SelectionSets&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;SelectionSets&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ViewDefinitions&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ViewDefinitions&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;Update-FormatData&lt;/span&gt; &lt;span class="n"&gt;-Prepend&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.\test.form.ps1xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Format Lists&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.\test.format.ps1xml&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ViewDefinitions&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;CPUCost&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ViewSelectedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TypeName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ViewSelectedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListEntries&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListEntry&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListItems&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PropertyName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ProcessName&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;PropertyName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="n"&gt;Cost&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ScriptBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;4&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ScriptBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormatString&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;C3&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;FormatString&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemSelectionCondition&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ScriptBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="n"&gt;_GE&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;5&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ScriptBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemSelectionCondition&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ListItems&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ListEntry&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ListEntries&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ListControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ViewDefinitons&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;Update-FormatData&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.\test.form.ps1xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;fl&lt;/span&gt; &lt;span class="n"&gt;-view&lt;/span&gt; &lt;span class="n"&gt;CPUCost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Format Tables&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.\test.format.ps1xml&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ViewDefinitions&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;CPUCost&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ViewSelectedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TypeName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TypeName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ViewSelectedBy&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableHeaders&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableColumnHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TableColumnHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableColumnHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;CPU&lt;/span&gt; &lt;span class="n"&gt;Cost&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;15&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Width&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TableColumnHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableRowEntries&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableRowEntry&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableColumnItems&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableColumnItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PropertyName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;PropertyName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TableColumnItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TableColumnItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ScriptBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;4&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ScriptBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormatString&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;N2&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;FormatString&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TableColumnItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TableColumnItems&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TableRowEntry&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TableRowEntries&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ViewDefinitons&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;Update-FormatData&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.\test.form.ps1xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="n"&gt;-view&lt;/span&gt; &lt;span class="n"&gt;CPUCost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Output&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Out-String: sends output as a series of strings&lt;/li&gt;
&lt;li&gt;Out-File: file&lt;/li&gt;
&lt;li&gt;Out-Printer: Out-Printer snagit&lt;/li&gt;
&lt;li&gt;Out-GridView: WPF grid&lt;ul&gt;
&lt;li&gt;PowerShell v3 has -PassThru&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Out-Null: supresses&lt;/li&gt;
&lt;li&gt;Out-Default: default formatter&lt;/li&gt;
&lt;li&gt;Out-Host: to the command line&lt;ul&gt;
&lt;li&gt;Has -Paging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;View all properties&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Get-Service&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="n"&gt;-property&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;-auto&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-String&lt;/span&gt; &lt;span class="n"&gt;-width&lt;/span&gt; &lt;span class="n"&gt;700&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-File&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Constrained Language in XML: used by PowerShell remoting
- Import-CLiXML
- Export-CLiXML
- ConvertTo-XML&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;XML&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$xml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;ConvertTo-XML&lt;/span&gt;
&lt;span class="nv"&gt;$xml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;CSV&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Import-Csv&lt;/span&gt; &lt;span class="n"&gt;-name&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;HTML&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gps&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;ConvertTo-HTML&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-File&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;</summary><category term="powershell"></category></entry><entry><title>Introduction to PowerShell</title><link href="http://ciwchris.github.io/blog/introduction-to-powershell.html" rel="alternate"></link><updated>2013-09-26T21:41:00-07:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-09-26:blog/introduction-to-powershell.html</id><summary type="html">&lt;p&gt;Notes from the Pluralsight course &lt;a href="http://pluralsight.com/training/Courses/TableOfContents/powershell-intro"&gt;Introduction to PowerShell&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Aliases&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;get-alias&lt;/span&gt;
&lt;span class="nb"&gt;set-alias&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="nb"&gt;get-childitem&lt;/span&gt;
&lt;span class="nb"&gt;export-alias&lt;/span&gt; &lt;span class="n"&gt;myalias&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="n"&gt;lis&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt;
&lt;span class="nb"&gt;import-alias&lt;/span&gt; &lt;span class="n"&gt;myalias&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Help&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;get-command&lt;/span&gt; &lt;span class="n"&gt;-verb&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;get-command&lt;/span&gt; &lt;span class="n"&gt;-noun&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;service&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;get-command&lt;/span&gt; &lt;span class="p"&gt;-?&lt;/span&gt; &lt;span class="c"&gt;# Help on get-command&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gci&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;where-object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-gt&lt;/span&gt; &lt;span class="n"&gt;100kb&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;sort-object&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="n"&gt;-property&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;-autosize&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Providers&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;get-psprovider&lt;/span&gt;
&lt;span class="nb"&gt;get-psdrive&lt;/span&gt;
&lt;span class="nb"&gt;clear-host&lt;/span&gt;
&lt;span class="nb"&gt;set-location&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;gci&lt;/span&gt;
&lt;span class="nb"&gt;set-location&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;gci&lt;/span&gt;
&lt;span class="nb"&gt;get-pssnapin&lt;/span&gt;
&lt;span class="nb"&gt;get-pssnapin&lt;/span&gt; &lt;span class="n"&gt;-registered&lt;/span&gt;
&lt;span class="nb"&gt;add-pssnapin&lt;/span&gt; &lt;span class="n"&gt;SqlServerCmdletSnapin100&lt;/span&gt;
&lt;span class="nb"&gt;remove-pssnapin&lt;/span&gt; &lt;span class="n"&gt;SqlServerCmdletSnapin100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Variables&lt;/h3&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$hi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$hi&lt;/span&gt; &lt;span class="c"&gt;# same is write-host $hi&lt;/span&gt;
&lt;span class="no"&gt;[System.Int32]&lt;/span&gt;&lt;span class="nv"&gt;$myint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;42&lt;/span&gt; &lt;span class="c"&gt;# or [int] $myint = 42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Comparisons&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-eq&lt;/li&gt;
&lt;li&gt;-ne&lt;/li&gt;
&lt;li&gt;-gt&lt;/li&gt;
&lt;li&gt;-lt&lt;/li&gt;
&lt;li&gt;-ge&lt;/li&gt;
&lt;li&gt;-le&lt;/li&gt;
&lt;li&gt;-Like # wildcard matching&lt;/li&gt;
&lt;li&gt;-NotLike&lt;/li&gt;
&lt;li&gt;-Match # regex matching&lt;/li&gt;
&lt;li&gt;-NotMatch&lt;/li&gt;
&lt;li&gt;Data on right side of comparison is converted to the data type of the left side&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;*-Variable&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;New-Variable&lt;/span&gt;  &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="n"&gt;123&lt;/span&gt;
&lt;span class="nb"&gt;Get-Variable&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;-valueonly&lt;/span&gt;
&lt;span class="nb"&gt;Get-Variable&lt;/span&gt;
&lt;span class="nb"&gt;Set-Variable&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="n"&gt;789&lt;/span&gt;
&lt;span class="nb"&gt;Clear-Variable&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
&lt;span class="nb"&gt;Remove-Variable&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Strings&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;Hello &amp;quot;&amp;quot;Word&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$heretext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="sh"&gt;@&amp;quot;&lt;/span&gt;
&lt;span class="sh"&gt;text&lt;/span&gt;
&lt;span class="sh"&gt;more&lt;/span&gt;
&lt;span class="sh"&gt;    with a tab&lt;/span&gt;
&lt;span class="sh"&gt;    ending&lt;/span&gt;
&lt;span class="sh"&gt;&amp;quot;@&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;There are &lt;/span&gt;&lt;span class="si"&gt;$((gci)&lt;/span&gt;&lt;span class="s2"&gt;.count) items&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Special characters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b: backspace&lt;/li&gt;
&lt;li&gt;n: newline&lt;/li&gt;
&lt;li&gt;r: carriage return&lt;/li&gt;
&lt;li&gt;t: tab&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Array&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# formal syntax&lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;5&lt;/span&gt; &lt;span class="c"&gt;# range&lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="n"&gt;-contain&lt;/span&gt; &lt;span class="n"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="n"&gt;-notcontain&lt;/span&gt; &lt;span class="n"&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;HashTables&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$hash&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Key&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Value&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Key&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$mykey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Key&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$mykey&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.$(&lt;/span&gt;&lt;span class="nv"&gt;$mykey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# can use an expression&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContainsValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="o"&gt;-contains&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Key&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="o"&gt;-contains&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Value&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Built in variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$true, $false&lt;/li&gt;
&lt;li&gt;$null&lt;/li&gt;
&lt;li&gt;$pwd&lt;/li&gt;
&lt;li&gt;$home&lt;/li&gt;
&lt;li&gt;$host&lt;/li&gt;
&lt;li&gt;$pid&lt;/li&gt;
&lt;li&gt;$psversiontable&lt;/li&gt;
&lt;li&gt;$_&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Programming&lt;/h3&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;switch&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;-casesensitive&lt;/span&gt; &lt;span class="o"&gt;-wildcard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Te*&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Found test&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Found hello&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Found none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;for loops&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;-lt&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;5&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gci&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Script Block&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;clear-host&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$a&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="c"&gt;# run the script block&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;clear-host&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;41&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;42&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;write-host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;# will return 42 and execute the write-host&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;42&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;write-host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;# only returns 42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Passing Parameters&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$qa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$question&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;$answer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nb"&gt;write-host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$question and the answer $answer&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$qa&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;What is&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The answer&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;$qa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$question&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;[string]&lt;/span&gt;&lt;span class="nv"&gt;$answer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default answer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;write-host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$question and the answer $answer&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$qa&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;What is&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The answer&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$qa&lt;/span&gt; &lt;span class="n"&gt;-question&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;What is&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;-answer&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The answer&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$qa&lt;/span&gt; &lt;span class="n"&gt;-q&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;What is&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;-a&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The answer&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Piplining Parameters&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;param&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$headertext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;begin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;runs first&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;process&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;-like&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*.ps1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;runs afterward&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;gci&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Scoping&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variables outside a script block are available inside a block&lt;/li&gt;
&lt;li&gt;If set inside the script block it makes a copy&lt;/li&gt;
&lt;li&gt;Only exists while within the script block&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Scopes&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$var&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;42&lt;/span&gt;
&lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;33&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;write-host&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt;
    &lt;span class="nb"&gt;write-host&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-Variable&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;-valueonly&lt;/span&gt; &lt;span class="n"&gt;-scope&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nb"&gt;write-host&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt;

&lt;span class="nv"&gt;$global:var&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;42&lt;/span&gt; &lt;span class="c"&gt;# can be used anywhere&lt;/span&gt;
&lt;span class="nv"&gt;$private:var&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;42&lt;/span&gt; &lt;span class="c"&gt;# cannot be seen in the script block&lt;/span&gt;

&lt;span class="n"&gt;Functions&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Parameters&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Can&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt;

&lt;span class="p"&gt;{%&lt;/span&gt; &lt;span class="n"&gt;include_code&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;PowerShell&lt;/span&gt; &lt;span class="n"&gt;Functions&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;  &lt;span class="nb"&gt;Set-Var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;[ref]&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$var&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;33&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$var&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;42&lt;/span&gt;
&lt;span class="nb"&gt;Set-Var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;[ref]&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Filters&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;filter&lt;/span&gt; &lt;span class="nb"&gt;Show-PS1Files&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;-like&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*.ps1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;gci&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;show-ps1files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Output to the pipeline&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Get-ChildName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;[switch]&lt;/span&gt;&lt;span class="nv"&gt;$verbose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$verbose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsPresent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$VerbosePreference&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Continue&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$VerbosePreference&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SilentlyContinue&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Verbose&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;More info here&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Output&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gci&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;select-object&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;Get-ChildName&lt;/span&gt; &lt;span class="n"&gt;-verbose&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Where-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;-like&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*.ps1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Help Content: Get-Help about_comment_based_help&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.SYNOPSIS&lt;/li&gt;
&lt;li&gt;.DESCRIPTION&lt;/li&gt;
&lt;li&gt;.PARAMETER&lt;/li&gt;
&lt;li&gt;.EXAMPLE&lt;/li&gt;
&lt;li&gt;.INPUTS&lt;/li&gt;
&lt;li&gt;.OUTPUTS&lt;/li&gt;
&lt;li&gt;.NOTES&lt;/li&gt;
&lt;li&gt;.LINK&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Help Content&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Get-ChildName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;&amp;lt;#&lt;/span&gt;
&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.SYNOPSIS&lt;/span&gt;&lt;span class="cm"&gt; &lt;/span&gt;
&lt;span class="cm"&gt;    Adds a file name extension to a supplied name.&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.DESCRIPTION&lt;/span&gt;&lt;span class="cm"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;    Adds a file name extension to a supplied name. &lt;/span&gt;
&lt;span class="cm"&gt;    Takes any strings for the file name or extension.&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.PARAMETER&lt;/span&gt;&lt;span class="cm"&gt; Name&lt;/span&gt;
&lt;span class="cm"&gt;    Specifies the file name.&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.PARAMETER&lt;/span&gt;&lt;span class="cm"&gt; Extension&lt;/span&gt;
&lt;span class="cm"&gt;    Specifies the extension. &amp;quot;Txt&amp;quot; is the default.&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.INPUTS&lt;/span&gt;&lt;span class="cm"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;    None. You cannot pipe objects to Add-Extension.&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.OUTPUTS&lt;/span&gt;&lt;span class="cm"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;    System.String. Add-Extension returns a string with the extension or file name.&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.EXAMPLE&lt;/span&gt;&lt;span class="cm"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;    C:\PS&amp;gt; extension -name &amp;quot;File&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;    File.txt&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.EXAMPLE&lt;/span&gt;&lt;span class="cm"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;    C:\PS&amp;gt; extension -name &amp;quot;File&amp;quot; -extension &amp;quot;doc&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;    File.doc&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.EXAMPLE&lt;/span&gt;&lt;span class="cm"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;    C:\PS&amp;gt; extension &amp;quot;File&amp;quot; &amp;quot;doc&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;    File.doc&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.LINK&lt;/span&gt;&lt;span class="cm"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;    http://www.fabrikam.com/extension.html&lt;/span&gt;

&lt;span class="cm"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;.LINK&lt;/span&gt;&lt;span class="cm"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;    Set-Item&lt;/span&gt;
&lt;span class="cm"&gt;#&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Output&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gci&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;select-object&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Files&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Get-Content&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c"&gt;# uses an array to store the contents&lt;/span&gt;
&lt;span class="nv"&gt;$all&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="no"&gt;[string]&lt;/span&gt;&lt;span class="err"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;[System.Environment]&lt;/span&gt;&lt;span class="err"&gt;::&lt;/span&gt;&lt;span class="n"&gt;NewLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# or `r`n&lt;/span&gt;

&lt;span class="nb"&gt;Set-Content&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="nv"&gt;$all&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new.txt&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;Add-Content&lt;/span&gt; &lt;span class="n"&gt;-Value&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;More stuff&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new.txt&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;Remove-Item&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new.txt&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;Test-Path&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;XML Filse&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$xml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="sh"&gt;@&amp;quot;&lt;/span&gt;
&lt;span class="sh"&gt;&amp;lt;root&amp;gt;&lt;/span&gt;
&lt;span class="sh"&gt;    &amp;lt;one&amp;gt;value&amp;lt;/one&amp;gt;&lt;/span&gt;
&lt;span class="sh"&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class="sh"&gt;&amp;quot;@&lt;/span&gt;
&lt;span class="nv"&gt;$xml&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.xml&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;$testXml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new-object&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt;
&lt;span class="nv"&gt;$testXml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$one&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$testXml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="nv"&gt;$testXml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="no"&gt;[xml]&lt;/span&gt;&lt;span class="nv"&gt;$testXml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Get-Content&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.xml&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Misc&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$choice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Read-Host&lt;/span&gt; &lt;span class="n"&gt;-Prompt&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Select something&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$padding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt; &lt;span class="c"&gt;# repeat an item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;</summary><category term="powershell"></category></entry><entry><title>Bash shell basics</title><link href="http://ciwchris.github.io/blog/bash-shell-basics.html" rel="alternate"></link><updated>2013-09-14T18:53:00-07:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-09-14:blog/bash-shell-basics.html</id><summary type="html">&lt;p&gt;Notes from the Pluralsight course &lt;a href="http://pluralsight.com/training/Courses/TableOfContents/introduction-bash-shell-linux-mac-os"&gt;Introduction to the Bash Shell on Mac OS and Linux&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Braces&lt;/h3&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;ls file?&lt;span class="o"&gt;{&lt;/span&gt;mine,yours&lt;span class="o"&gt;}&lt;/span&gt;.&lt;span class="o"&gt;{&lt;/span&gt;txt,png&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Commands&lt;/h3&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;grep 1978 oscars.tsv | sort &amp;gt; 1978_films.txt
cut -f 3 oscars.tsv | grep 4 | wc -l
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Sort second column as numbers in reverse order&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;sort -rnk2 math_grades
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Unique entries with their count&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;sort math_attendance | uniq -c | sort -nr
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Find the largest file in the directory&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;ls -lS | head -n 2 | tail -n 1
ls -lrS | tail -n 2 &lt;span class="c"&gt;# Better way&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Don't exit but update as new entries come in&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;tail -f auth.log
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Number of files in a directory&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;ls -a | wc -l
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Search for bruce, case insensitive, in a set of files&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;grep -i bruce *grades
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Filter out using an extended regex before working with other content&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;grep -Ev &lt;span class="s2"&gt;&amp;quot;^$|lecture&amp;quot;&lt;/span&gt; math_attendance | sort | uniq -c | sort -nr
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Search for txt files with curious in them&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;find . -name &lt;span class="s1"&gt;&amp;#39;*.txt&amp;#39;&lt;/span&gt; -exec grep -l curious &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Change uppercase 'S' to lowercase 's'&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;cat physics_grades | tr S s 
tr S s &amp;lt; physics_grades &lt;span class="c"&gt;# More efficient method&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Change from tab separated to semicolon separated&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;tr &lt;span class="se"&gt;\\&lt;/span&gt;t &lt;span class="se"&gt;\;&lt;/span&gt; &amp;lt; oscars.tsv &amp;gt; oscars.csv
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Using sed&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;sed &lt;span class="s1"&gt;&amp;#39;s/something/something new/g&amp;#39;&lt;/span&gt; one.txt &amp;gt; two.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Combine files using columns (not append)&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;paste *grades
join *grades &lt;span class="c"&gt;# Using keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Command Substitution&lt;/h3&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello `whoami`&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;#old form&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Buy milk&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;&amp;quot;notes$(date).txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;h3&gt;Copy / Paste&lt;/h3&gt;
&lt;p&gt;Select text and paste with middle mouse click&lt;/p&gt;
&lt;h3&gt;Movement keys&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ctrl-a: start of line&lt;/li&gt;
&lt;li&gt;ctrl-e: end of line&lt;/li&gt;
&lt;li&gt;ctrl-f: forward 1 char&lt;/li&gt;
&lt;li&gt;ctrl-b: backward 1 char&lt;/li&gt;
&lt;li&gt;alt-f: forward 1 word&lt;/li&gt;
&lt;li&gt;alt-b: backward 1 word&lt;/li&gt;
&lt;li&gt;ctrl-d: delete 1 char&lt;/li&gt;
&lt;li&gt;ctrl-h: delete 1 char backward&lt;/li&gt;
&lt;li&gt;alt-d: delete 1 word&lt;/li&gt;
&lt;li&gt;ctrl-w: delete 1 word backward&lt;/li&gt;
&lt;li&gt;ctrl-k: delete rest of line&lt;/li&gt;
&lt;li&gt;ctrl-u: delete from start of line&lt;/li&gt;
&lt;li&gt;ctrl-r: search back in history&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Processes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C-z: stop and return to a command prompt&lt;ul&gt;
&lt;li&gt;fg or bg to start the process again&lt;/li&gt;
&lt;li&gt;or use the job id: fg %1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jobs: to list the running jobs&lt;/li&gt;
&lt;li&gt;kill %1: kill job 1&lt;/li&gt;
&lt;li&gt;or by process id&lt;ul&gt;
&lt;li&gt;ps -ef: list all processes and show the owner&lt;/li&gt;
&lt;li&gt;kill 1234&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Customization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;alias: view aliases&lt;/li&gt;
&lt;li&gt;\ls: run normal command, not the alias for it&lt;/li&gt;
&lt;li&gt;.bashrc: executed for non-login shells&lt;/li&gt;
&lt;li&gt;.profile or .bash_profile: executed for login shells&lt;/li&gt;
&lt;li&gt;echo $PS1: reading an environment variable&lt;/li&gt;
&lt;li&gt;PS1="\h:\W /u": set an environment variable&lt;/li&gt;
&lt;li&gt;env: list all environment variables&lt;/li&gt;
&lt;li&gt;EDITOR=vim: set the editor&lt;/li&gt;
&lt;li&gt;export EDITOR: to make it visible&lt;ul&gt;
&lt;li&gt;or export EDITOR=vim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;chsh: change shell&lt;ul&gt;
&lt;li&gt;\bin\zsh: change to using zsh&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;echo $SHELL: view current shell&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cli"></category></entry><entry><title>Starting a technology radar</title><link href="http://ciwchris.github.io/blog/starting-a-technology-radar.html" rel="alternate"></link><updated>2013-08-26T18:26:00-07:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-08-26:blog/starting-a-technology-radar.html</id><summary type="html">&lt;p&gt;I became intrigued by the idea of creating a &lt;a href="http://www.thoughtworks.com/radar"&gt;Technology Radar&lt;/a&gt; while listening to &lt;a href="nealford.com"&gt;Neal Ford&lt;/a&gt; on the &lt;a href="http://thinkrelevance.com/blog/2013/07/26/neal-ford-of-thoughtworks-episode-036"&gt;Relevance Podcast&lt;/a&gt;. Initially the plan was to &lt;a href="http://nealford.com/memeagora/2013/05/28/build_your_own_technology_radar.html"&gt;create a radar&lt;/a&gt; for our department at work. My thinking was that it would give focus to developers, which technology to concentrate on and which should be used in projects, as well as give visibility as to what directions developers are exploring, and therefore what may start appearing in projects. It would also give management a good visual, and explanation if we did a write up, as to what we are using and where we are heading. It's questionable whether any action will be taken to create one but after reading the section on creating a &lt;em&gt;Personal Radar&lt;/em&gt; I became motivated to create my own.&lt;/p&gt;
&lt;p&gt;Why did I create my own radar? I consume information from a variety of sources. As a result I'm exposed to many interesting topics and ideas. I've come to realize it is too many. I tend to find one interesting topic, begin to pursue it only to be interrupted by the next interesting thing to come my way. In the end I have an awareness of many things but have learned none. I therefore concluded that I needed to focus on a small number of items, but still allow myself to be exposed to other items as well. I decided a &lt;em&gt;Personal Radar&lt;/em&gt; may help me do just that. Each quarter, or perhaps twice a year, I will update a personal radar. The items I focus on will be selected from the radar. When I produce the next radar then I will select a new set of items to focus on. My hope is that I may become disciplined and learn an item more in-depth before moving on to the next interesting thing. So without further delay, below is my personal radar, probably for the remainder of the year, and explanation text, a work in progress.&lt;/p&gt;
&lt;p&gt;&lt;a href="/pages/technology-radar.html"&gt;Personal Radar&lt;/a&gt;&lt;br /&gt;
&lt;a href="/technology-radar-explanation.html"&gt;Radar Explanation&lt;/a&gt;&lt;/p&gt;</summary><category term="techradar"></category></entry><entry><title>Mocking with Moq</title><link href="http://ciwchris.github.io/blog/mocking-with-moq.html" rel="alternate"></link><updated>2013-03-04T21:29:00-08:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-03-04:blog/mocking-with-moq.html</id><summary type="html">&lt;p&gt;Notes for the pluralsight course &lt;a href="http://pluralsight.com/training/Courses/TableOfContents/mocking-with-moq"&gt;Mocking With Moq&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Unit tests should be&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomic:&lt;/strong&gt; one small thing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deterministic:&lt;/strong&gt; pass or fail&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repeatable:&lt;/strong&gt; shouldn't start failing if no code has changed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolated and order independent:&lt;/strong&gt; nothing should affect it&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fast:&lt;/strong&gt; milliseconds&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy to setup:&lt;/strong&gt; shouldn't take a lot of coding&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Samples&lt;/h3&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Verify a method is called&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;

&lt;span class="n"&gt;mockRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifyAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Verify a method was called n times&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()),&lt;/span&gt;
    &lt;span class="n"&gt;Times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exactly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Mock return a value&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockAddressBuilder&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CustomerToCreateDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Using an out parameter&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockMailingAddressFactory&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TryParse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(),&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;mailingAddress&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Change the return value after each call to the mocked member&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockIdFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++);&lt;/span&gt;

&lt;span class="n"&gt;mockIdFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AtLeastOnce&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Verify the arguments passed to the mocked method are as expected&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockFullNameBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(),&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;

&lt;span class="n"&gt;mockFullNameBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerToCreateDto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvariantCultureIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerToCreateDto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvariantCultureIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Conditionally return a value, control code flow&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockCustomerStatusFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CustomerToCreateDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DesiredStatus&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;CustomerStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Platinum&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomerStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Platinum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveSpecial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Throw an exception&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockCustomerAddressFactory&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CustomerToCreateDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Throws&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;InvalidCustomerAddressException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Verify a setter has been set&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalTimeZone&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Verify a getter has been called&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorkstationId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifyGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorkstationId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;For nested objects you don't have to mock each object; Moq will automatically return a mocked object if it can.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Recursive/nested properties, Moq realizes each is mockable and so will return a mock for each&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SystemConfiguration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuditingInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorkstationId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifyGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SystemConfiguration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuditingInformation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorkstationId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Stub a property&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetupProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorkstationId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifyGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorkstationId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Stub all properties&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetupAllProperties&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorkstationId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2345&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;mockApplicationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerifyGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WorkstationId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Event&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotifySalesTeam&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;NotifySalesTeamEventArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;mockMailingRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewCustomerMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Custom event&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotifySalesTeam&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;jim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;mockMailingRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewCustomerMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Two types of mocks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Loose:&lt;/strong&gt; if the object doesn't have any expectations set it will return the default value for the object. It will not throw an exception when verify is called. This is the default behavior for Moq&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strict:&lt;/strong&gt; exception will be thrown if the object hasn't been explicitly setup.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Strict mock behavior&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomerRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;MockBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Strict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;

&lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Partial mock:&lt;/strong&gt; allows invocation of a base class implementation&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Mock the SUT when working with a base class&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockNameFormatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SAPBuilder&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="n"&gt;mockNameFormatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseBadWordsFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()),&lt;/span&gt;
    &lt;span class="n"&gt;Times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exactly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Recursive:&lt;/strong&gt; Set the default value of a mock to return a mocked object, &lt;code&gt;DefaultValue = DefaultValue.Mock&lt;/code&gt;, instead of the object's default value, this only works if  the object is mockable. Then use &lt;code&gt;Mock.Get()&lt;/code&gt; to retrieve the actual mock which can then be used like any other mocked object&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Recursive mock&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockAddressFormatterFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IAddressFormatterFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;DefaultValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;addressFormatter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mockAddressFormatterFactory&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;());&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addressFormatter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CustomerToCreateDto&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;Use a mock factory when working with lots of dependencies. This centralizes the creation and verification of all mock objects.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Mock factory&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MockRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MockBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Loose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;DefaultValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockCustomerRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;mockFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomerRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockCustomerAddressFormatter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;mockFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomerAddressFormatter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

&lt;span class="n"&gt;mockFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;When mocking protected members the member must be marked as virtual. You lose intellisense, method name must appear in a string. Must use &lt;code&gt;ItExpr&lt;/code&gt; instead of &lt;code&gt;It&lt;/code&gt;.&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Protected members&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mockCustomerNameFormatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Protected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ParseBadWordsFrom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;asdf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verifiable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;mockCustomerNameFormatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;</summary><category term="c#"></category><category term="mocking"></category><category term="tests"></category></entry><entry><title>The reasonable expectations of your CTO</title><link href="http://ciwchris.github.io/blog/the-reasonable-expectations-of-your-CTO.html" rel="alternate"></link><updated>2013-02-25T21:11:00-08:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-02-25:blog/the-reasonable-expectations-of-your-CTO.html</id><summary type="html">&lt;p&gt;Notes from the presentation "The Reasonable Expectations of Your CTO" given by Uncle Bob: &lt;a href="http://vimeo.com/56708193"&gt;Demanding Professionalism: Uncle Bob @ Philly .NET User Group&lt;/a&gt;. The talk begins approximately 21 minutes in.&lt;/p&gt;
&lt;h3&gt;Reasonable Expectations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Don't ship junk:&lt;/strong&gt; "But we had to make a mess to make the deadline." This is a bad trade off. Take the time, it will keep you going fast later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always be ready to ship:&lt;/strong&gt; Not all the features may be complete, but it is a business decision to ship it or not. We should always be ready, at any moment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stable Productivity:&lt;/strong&gt; It's easy to start a project fast. Inevitably you start slowing down more and more. Start and continue well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inexpensive adaptability:&lt;/strong&gt; A change in requirements should be cheap. It's called &lt;em&gt;soft&lt;/em&gt;ware for a reason.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous improvement:&lt;/strong&gt; Code should be left better. Could should not be left to rot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fearless competence:&lt;/strong&gt; Should not be afraid to change the code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extreme quality:&lt;/strong&gt; Should feel good about the work we did. This should be our first motivation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Will not dump on QA:&lt;/strong&gt; QA should not find anything. Should be considered a failure if they do.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automation:&lt;/strong&gt; QA shouldn't have to spend a day verifying everything in the application. Automation can perform this task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nothing fragile:&lt;/strong&gt; Shouldn't be afraid to touch something because you might break it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cover for each other:&lt;/strong&gt; Someone else should know what you know. If you are gone someone else should be able to perform your tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Honest estimates:&lt;/strong&gt; Accurate versus precise. Don't say you can do something when you know you can't.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Say "No":&lt;/strong&gt; When it's wrong you need to say so.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous aggressive learning:&lt;/strong&gt; Need to be at the front of change. We are responsible for our career.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teaching:&lt;/strong&gt; We don't train new developers how to be developers. We leave them on their own. Teaching also helps us learn.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Questions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Are any of the expectations, by themselves, unreasonable?&lt;/li&gt;
&lt;li&gt;Any of these expectations standout? Any you felt more passionate about?&lt;/li&gt;
&lt;li&gt;Were any of the comments made, while unpacking the expectations, unreasonable?&lt;/li&gt;
&lt;li&gt;How well do we meet each expectation?&lt;/li&gt;
&lt;li&gt;For those expectations we are weak can we rank in priority order and then, beginning at the highest, make a change to improve our ability to meet the expectation?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Robbie Clutton posted similar notes on this presentation which are worth viewing: &lt;a href="http://pivotallabs.com/uncle-bob-agile-testing-and-bdd/"&gt;Agile Testing and BDD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Relatedly, Bevan's post on &lt;a href="http://www.nichesoftware.co.nz/blog/2013-01/607/secret-awesome-software"&gt;"The secret to Awesome software"&lt;/a&gt; is well worth a read.&lt;/p&gt;</summary><category term="craftsmanship"></category><category term="philosophy"></category></entry><entry><title>Entering escape in insert mode</title><link href="http://ciwchris.github.io/blog/entering-escape-in-insert-mode.html" rel="alternate"></link><updated>2013-02-16T16:17:00-08:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-02-16:blog/entering-escape-in-insert-mode.html</id><summary type="html">&lt;p&gt;In the previous post I created a macro which made use of an 'escape':&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;^dwA ^[pxj
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;When outputting the contents of the register containing this macro the 'escape' is translated as &lt;code&gt;^[&lt;/code&gt;. This shouldn't be surpising. This format is known as &lt;a href="http://en.wikipedia.org/wiki/Caret_notation"&gt;caret notation&lt;/a&gt; and is used to represent non-printable control characters in ASCII. That explains the caret, but why the bracket? Interestingly, the bracket, by default, can be used as an alternative to the 'escape' key in Vim, &lt;code&gt;h: i-ctrl-[&lt;/code&gt;. The reason for the bracket has to do with &lt;a href="http://en.wikipedia.org/wiki/Control_character#How_control_characters_map_to_keyboards"&gt;how control characters are mapped on keyboards&lt;/a&gt;. As stated in the article, control characters are rendered by the ASCII value of the non-printable character plus 64. In this case the 'escape' key has the &lt;a href="http://en.wikipedia.org/wiki/ASCII#ASCII_control_characters"&gt;ASCII value of 27&lt;/a&gt;. Adding 64 to this value gives us the decimal value of 91, which is &lt;a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters"&gt;represented by the bracket, '['&lt;/a&gt;. And that is why the 'escape' was rendered as &lt;code&gt;^[&lt;/code&gt; in the macro. &lt;code&gt;h: key-notation&lt;/code&gt; contains a table detailing how many non-printable characters can be rendered in Vim.&lt;/p&gt;
&lt;p&gt;The follow up question to this would be, "if I were to create the macro myself how would I type &lt;code&gt;^[&lt;/code&gt;?" If the caret key was literally used then it would instruct Vim to move to the "first non-blank character of the line", &lt;code&gt;:h ^&lt;/code&gt;. Not our desired outcome. To type an 'escape' it is necessary to use 'ctrl-v', which will "insert next non-digit literally", &lt;code&gt;:h i_ctrl-v&lt;/code&gt;. So to use an 'escape' in a macro being created manually type: 'ctrl-v' followed by 'escape'.&lt;/p&gt;</summary><category term="vim"></category></entry><entry><title>Examining the contents of a macro</title><link href="http://ciwchris.github.io/blog/examining-the-contents-of-a-macro.html" rel="alternate"></link><updated>2013-02-13T15:42:00-08:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-02-13:blog/examining-the-contents-of-a-macro.html</id><summary type="html">&lt;p&gt;Macros are a breeze in Vim! But often I make a mistake while recording the macro, undo my change and repeat. Hopefully I get it right the next time, but I'd rather not look at the statistics. It turns out the registers Vim stores macros in are the same set of registers used for other operations. What this means is that I can &lt;code&gt;put&lt;/code&gt; the contents of the register, modify it and then &lt;code&gt;yank&lt;/code&gt; it back in. Let's say I had the following list of names:&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;John Smith&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Joe&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;
&lt;span class="n"&gt;Mike&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;
&lt;span class="n"&gt;Juan&lt;/span&gt; &lt;span class="n"&gt;Carlos&lt;/span&gt;
&lt;span class="n"&gt;Jane&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;
&lt;span class="n"&gt;Mike&lt;/span&gt; &lt;span class="n"&gt;Jones&lt;/span&gt;
&lt;span class="n"&gt;David&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;
&lt;span class="n"&gt;Sarah&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;
&lt;span class="n"&gt;James&lt;/span&gt; &lt;span class="n"&gt;Smith&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;And I want to swap the first name and last name. There are many ways to do this but using a macro one may write:&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;^dwA ^[pxj
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;I can read these commands into register &lt;code&gt;a&lt;/code&gt; by yanking the line like so, &lt;code&gt;"ay$&lt;/code&gt;. Now I can use it as a macro to swap the names, &lt;code&gt;10@a&lt;/code&gt;. Voilà!&lt;/p&gt;
&lt;figure class='code'&gt;
&lt;figcaption class='code-title'&gt;&lt;span&gt;Smith John&lt;/span&gt;&lt;/figcaption&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Smith&lt;/span&gt; &lt;span class="n"&gt;Joe&lt;/span&gt;
&lt;span class="n"&gt;Smith&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;
&lt;span class="n"&gt;Smith&lt;/span&gt; &lt;span class="n"&gt;Mike&lt;/span&gt;
&lt;span class="n"&gt;Carlos&lt;/span&gt; &lt;span class="n"&gt;Juan&lt;/span&gt;
&lt;span class="n"&gt;Smith&lt;/span&gt; &lt;span class="n"&gt;Jane&lt;/span&gt;
&lt;span class="n"&gt;Jones&lt;/span&gt; &lt;span class="n"&gt;Mike&lt;/span&gt;
&lt;span class="n"&gt;Smith&lt;/span&gt; &lt;span class="n"&gt;David&lt;/span&gt;
&lt;span class="n"&gt;Smith&lt;/span&gt; &lt;span class="n"&gt;Sarah&lt;/span&gt;
&lt;span class="n"&gt;Smith&lt;/span&gt; &lt;span class="n"&gt;James&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;To always make this macro avaiable I can save it in my &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;let&lt;/span&gt; @&lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^dwA ^[pxj&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;</summary><category term="vim"></category></entry><entry><title>Reversing a file in vim</title><link href="http://ciwchris.github.io/blog/reversing-a-file-in-vim.html" rel="alternate"></link><updated>2013-02-11T14:30:00-08:00</updated><author><name>Chris</name></author><id>tag:ciwchris.github.io,2013-02-11:blog/reversing-a-file-in-vim.html</id><summary type="html">&lt;p&gt;Digging through the Vim help docs &lt;code&gt;:h usr_12.txt&lt;/code&gt; I came across the topic 'Reverse line order', &lt;code&gt;h 12.1&lt;/code&gt;. Sounds interesting. The command is:&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;global&lt;span class="sr"&gt;/^/&lt;/span&gt;&lt;span class="k"&gt;m&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/figure&gt;

&lt;p&gt;While familar with &lt;code&gt;:global&lt;/code&gt; the rest of the command was mysterious. The documentation did a good job breaking this down. &lt;code&gt;^&lt;/code&gt; will match the beginning of every line. &lt;code&gt;m 0&lt;/code&gt; will &lt;code&gt;:move&lt;/code&gt; the line below the line number specified; in other words move the current line to the first line of the file. Line '0' is called the 'mythical zeroth line', according to the docs. The same came be done with a range using marks:&lt;/p&gt;
&lt;figure class='code'&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t+1,.g/^/m &amp;#39;&lt;/span&gt;&lt;span class="k"&gt;t&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/figure&gt;
`&lt;/p&gt;
&lt;p&gt;Here, assuming mark 't' has been set, then all lines between it and the current line will be reversed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:move&lt;/code&gt; was also new to me, although straight forward. It's compliment, &lt;code&gt;:copy&lt;/code&gt;, it also worth noting here, also defined as &lt;code&gt;:t&lt;/code&gt;.&lt;/p&gt;</summary><category term="vim"></category></entry></feed>